/**
 * Experimental code for Paintball object that allows it to move two spaces
 * from a designated player (the one that fires the paintball). They remain
 * in the game as a permanent obstacle, so watch your step!
 *
 * @Victor Lek + Sai Chinta (your name)
 * @1.10 
 */
import info.gridworld.actor.Actor;
import info.gridworld.grid.Location;
import info.gridworld.grid.Grid;
import java.util.ArrayList;

public class Paintball extends Actor
{
    // instance variables - replace the example below with your own
    private int PlayerNumber = 0;
    /**
     * Constructor for objects of class Paintball
     */
    public Paintball(int PlayerNumber)
    {
        super();
        this.PlayerNumber = PlayerNumber;
    }

    /**
     * An example of a method - replace this comment with your own
     *
     * @param  y  a sample parameter for a method
     * @return    the sum of x and y
     */
    public void act(int paintDirection)
    {
        Grid<Actor> gr = getGrid();
        if (gr == null)
        return;
        Location loc = getLocation();
        Location next = loc.getAdjacentLocation(paintDirection);
        if (gr.isValid(next))
            moveTo(next);
        else
        {
            ArrayList<Actor> actors = getGrid().getNeighbors(getLocation());
            for (Actor a : actors)
            {
            if (a instanceof People == true)
                //a.removeSelfFromGrid();
                System.out.println("'OOF!'");
            }
        removeSelfFromGrid();
    }
    }
}
import info.gridworld.grid.Grid;
import info.gridworld.grid.Location;
import info.gridworld.actor.Actor;
import info.gridworld.actor.ActorWorld;
public class ArenaWorld extends ActorWorld
{
    // instance variables - replace the example below with your own
    private int direction = 0;
    //People two;
    //People one = new People(1)

    /**
     * Constructor for objects of class ArenaWorld
     */
    public ArenaWorld(Grid g)
    {
        super(g);
    }

    /**
     * An example of a method - replace this comment with your own
     *
     * @param  y  a sample parameter for a method
     * @return    the sum of x and y
     */
    public boolean locationClicked(Location loc)
    {
        Actor f = this.getGrid().get(loc);
        if (f != null)
        {
            f.act();
            return true;
        }
        else
        {
            return false;
        }
    }
    public boolean keyPressed(String description, Location loc)
    {
        //People one = new People(1);
        //People two = new People(2);
        if (description.equals("W"))
        {
            System.out.println("Sample Text (w key works)");
            People.changeDirection(0);
            System.out.println("Facing NORTH...");
            return true;
        }
        else if (description.equals("A"))
        {
            People.changeDirection(270);
            System.out.println("Facing EAST...");
            return true;
        }
        else if (description.equals("S"))
        {
            People.changeDirection(180);
            System.out.println("Facing SOUTH...");
            return true;
        }
        else if (description.equals("D"))
        {
            People.changeDirection(90);
            System.out.println("Facing EAST...");
            return true;
        }
        else if (description.equals("Q"))
        {
            People.changeDirection(315);
            System.out.println("Facing NORTHWEST...");
            return true;
        }
        else if (description.equals("E"))
        {
            People.changeDirection(45);
            System.out.println("Facing NORTHEAST...");
            return true;
        }
        else if (description.equals("C"))
        {
            People.changeDirection(135);
            System.out.println("Facing SOUTHEAST...");
            return true;
        }
        else if (description.equals("Z"))
        {
            People.changeDirection(225);
            System.out.println("Facing SOUTHWEST...");
            return true;
        }
        else if (description.equals("X"))
        {
            People.swapMovePermission();
            return true;
        }
       return false;
    }
}
